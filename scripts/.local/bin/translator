#!/bin/bash

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
RESET='\033[0m'

# Function to display usage instructions
usage() {
  echo -e "${YELLOW}Google Translate CLI Tool${RESET}"
  echo -e "Usage: $0 [OPTIONS] \"TEXT TO TRANSLATE\""
  echo -e "\nOptions:"
  echo -e "  -f, --from   Source language (default: en)"
  echo -e "  -t, --to     Target language (default: fr)"
  echo -e "  -m, --mode   Output mode:"
  echo -e "               ${GREEN}pretty${RESET}  - Formatted, detailed output (default)"
  echo -e "               ${MAGENTA}raw${RESET}     - Raw translation text"
  echo -e "               ${BLUE}json${RESET}     - Full JSON response"
  echo -e "  -h, --help   Show this help message"
  echo -e "\nExamples:"
  echo -e "  $0 -f en -t es \"Hello, world!\""
  echo -e "  $0 -m raw \"Bonjour\""
  echo -e "  $0 -m json -f fr -t en \"Comment allez-vous?\""
}

# Default settings
SOURCE_LANG="en"
TARGET_LANG="fr"
OUTPUT_MODE="pretty"

# Parse command line arguments
ARGS=$(getopt -o f:t:m:h --long from:,to:,mode:,help -n "$0" -- "$@")
eval set -- "$ARGS"

while true; do
  case "$1" in
  -f | --from)
    SOURCE_LANG="$2"
    shift 2
    ;;
  -t | --to)
    TARGET_LANG="$2"
    shift 2
    ;;
  -m | --mode)
    case "$2" in
    raw | pretty | json)
      OUTPUT_MODE="$2"
      ;;
    *)
      echo -e "${RED}Invalid output mode. Choose 'raw', 'pretty', or 'json'.${RESET}"
      usage
      exit 1
      ;;
    esac
    shift 2
    ;;
  -h | --help)
    usage
    exit 0
    ;;
  --)
    shift
    break
    ;;
  *)
    echo -e "${RED}Invalid argument!${RESET}"
    usage
    exit 1
    ;;
  esac
done

# Check if text is provided
if [ $# -eq 0 ]; then
  echo -e "${RED}Error: No text provided to translate!${RESET}"
  usage
  exit 1
fi

# URL encode the text
TEXT=$(printf "%s" "$1" | jq -s -R -r @uri)

# Perform translation
FULL_RESPONSE=$(curl -s "https://translate.googleapis.com/translate_a/single?client=gtx&sl=${SOURCE_LANG}&tl=${TARGET_LANG}&dt=t&dt=bd&dj=1&q=${TEXT}")

# Process output based on mode
case "$OUTPUT_MODE" in
raw)
  # Extract only the translation text
  TRANSLATION=$(echo "$FULL_RESPONSE" | jq -r '.sentences[0].trans')
  echo "$TRANSLATION"
  ;;

pretty)
  # Detailed, formatted output
  echo -e "${BLUE}Translating from ${SOURCE_LANG} to ${TARGET_LANG}:${RESET}"
  echo -e "${GREEN}Original:${RESET} $1"

  # Main translation
  TRANSLATION=$(echo "$FULL_RESPONSE" | jq -r '.sentences[0].trans')
  echo -e "${GREEN}Translated:${RESET} ${TRANSLATION}"

  # Extra details if available
  CONFIDENCE=$(echo "$FULL_RESPONSE" | jq -r '.sentences[0].confidence // "N/A"')
  SOURCE_TEXT=$(echo "$FULL_RESPONSE" | jq -r '.sentences[0].orig // "N/A"')

  echo -e "${YELLOW}Additional Details:${RESET}"
  echo -e "  Original Text: ${SOURCE_TEXT}"
  echo -e "  Translation Confidence: ${CONFIDENCE}"

  # Alternative translations or dictionary entries
  ALTERNATIVES=$(echo "$FULL_RESPONSE" | jq -r '.dict // [] | map("\n  â€¢ " + (.pos // "Unknown") + ": " + (.terms | join(", "))) | join("")')
  if [ -n "$ALTERNATIVES" ]; then
    echo -e "${YELLOW}Alternative Translations:${RESET}${ALTERNATIVES}"
  fi
  ;;

json)
  # Full JSON output
  echo "$FULL_RESPONSE" | jq .
  ;;
esac
