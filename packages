#!/bin/env bash

# Color codes and symbols
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly YELLOW='\033[1;33m'
readonly CYAN='\033[0;36m'
readonly NO_COLOR='\033[0m'
readonly BOLD='\033[1m'

# Symbols for different types of messages
readonly INFO_SYMBOL="ℹ"
readonly SUCCESS_SYMBOL="✓"
readonly ERROR_SYMBOL="✗"
readonly WARNING_SYMBOL="⚠"
readonly ARROW_SYMBOL="→"
readonly WORKING_SYMBOL="⚙"

function error_exit {
  echo -e "${RED}${ERROR_SYMBOL} Error: $1${NO_COLOR}" 1>&2
  exit 1
}

function is_package_installed {
  if pacman -Q "$1" &>/dev/null; then
    return 0 # Package is installed
  else
    return 1 # Package is not installed
  fi
}

function install_yay {
  if is_package_installed "yay"; then
    echo -e "${BLUE}${INFO_SYMBOL} yay is already installed. Skipping installation...${NO_COLOR}"
    return 0
  fi

  if [[ "$EUID" -eq 0 ]]; then
    error_exit "Please run this script as a non-root user with sudo privileges."
  fi

  echo -e "${CYAN}${WORKING_SYMBOL} Checking sudo privileges...${NO_COLOR}"
  sudo -v || error_exit "Failed to obtain sudo privileges."

  echo -e "${CYAN}${WORKING_SYMBOL} Updating system and installing necessary packages...${NO_COLOR}"
  sudo pacman -Syu --needed base-devel git --noconfirm || error_exit "Failed to install base-devel and git."

  echo -e "${CYAN}${WORKING_SYMBOL} Cloning the yay repository...${NO_COLOR}"
  git clone https://aur.archlinux.org/yay.git || error_exit "Failed to clone the yay repository."
  cd yay || error_exit "Failed to change to the yay directory."

  echo -e "${CYAN}${WORKING_SYMBOL} Building and installing yay...${NO_COLOR}"
  makepkg -si --noconfirm || error_exit "Failed to build and install yay."
  cd ..
  rm -rf yay

  echo -e "${GREEN}${SUCCESS_SYMBOL} yay installation completed successfully.${NO_COLOR}"
}

function check_dependencies {
  if ! is_package_installed "bc"; then
    echo -e "${YELLOW}${WARNING_SYMBOL} bc is not installed. Installing bc...${NO_COLOR}"
    sudo pacman -S --noconfirm bc || error_exit "Failed to install bc."
    echo -e "${GREEN}${SUCCESS_SYMBOL} bc installed successfully.${NO_COLOR}"
  else
    echo -e "${BLUE}${INFO_SYMBOL} bc is already installed.${NO_COLOR}"
  fi
}

function install_packages {
  OFFICIAL_PACKAGES="misc/packages/programs.list"
  total_packages=$(grep -vcE '^\s*(#|$)' "$OFFICIAL_PACKAGES")
  current_package=0

  echo -e "${CYAN}${INFO_SYMBOL} Reading package list from $OFFICIAL_PACKAGES.${NO_COLOR}"

  while IFS= read -r package || [[ -n "$package" ]]; do
    if [[ ! -z "$package" && "$package" != \#* ]]; then
      ((current_package++))
      progress=$(echo "scale=2; $current_package / $total_packages * 100" | bc)

      if pacman -Q "$package" &>/dev/null; then
        echo -e "${BLUE}${INFO_SYMBOL} [ $(printf "%5.1f" $progress)% ] $package is already installed. Skipping...${NO_COLOR}"
        continue
      fi

      echo -e "${CYAN}${WORKING_SYMBOL} [ $(printf "%5.1f" $progress)% ] Installing $package...${NO_COLOR}"
      if yay -S --noconfirm "$package" &>/dev/null; then
        if pacman -Q "$package" &>/dev/null; then
          echo -e "${GREEN}${SUCCESS_SYMBOL} [ OK ] $package installed successfully.${NO_COLOR}"
        else
          echo -e "${RED}${ERROR_SYMBOL} [ NOT FOUND ] Package $package not found.${NO_COLOR}"
        fi
      else
        echo -e "${RED}${ERROR_SYMBOL} [ FAILED ] Failed to install $package.${NO_COLOR}"
        error_exit "Failed to install $package."
      fi
    fi
  done <"$OFFICIAL_PACKAGES"
  echo -e "${GREEN}${SUCCESS_SYMBOL} Official packages installation completed successfully.${NO_COLOR}"
}

function install_oh_my_zsh {
  if ! is_package_installed "zsh"; then
    echo -e "${CYAN}${WORKING_SYMBOL} Installing zsh...${NO_COLOR}"
    sudo pacman -S --noconfirm zsh || error_exit "Failed to install zsh"
    echo -e "${GREEN}${SUCCESS_SYMBOL} zsh installed successfully.${NO_COLOR}"
  fi

  echo -e "${CYAN}${WORKING_SYMBOL} Changing default shell to zsh...${NO_COLOR}"
  sudo chsh -s $(which zsh) $USER || error_exit "Failed to change shell to zsh"

  if [ -d "$HOME/.oh-my-zsh" ]; then
    echo -e "${YELLOW}${WARNING_SYMBOL} Backing up existing Oh My Zsh installation...${NO_COLOR}"
    mv "$HOME/.oh-my-zsh" "$HOME/.oh-my-zsh.backup-$(date +%Y%m%d-%H%M%S)"
    mv "$HOME/.zshrc" "$HOME/.zshrc.backup-$(date +%Y%m%d-%H%M%S)" 2>/dev/null || true
  fi

  echo -e "${CYAN}${WORKING_SYMBOL} Installing Oh My Zsh...${NO_COLOR}"
  sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended ||
    error_exit "Failed to install Oh My Zsh"

  ZSH_CUSTOM_PATH="${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}"

  local plugins=(
    "zsh-autosuggestions:https://github.com/zsh-users/zsh-autosuggestions"
    "zsh-syntax-highlighting:https://github.com/zsh-users/zsh-syntax-highlighting"
  )

  for plugin in "${plugins[@]}"; do
    name="${plugin%%:*}"
    url="${plugin#*:}"

    if [ -d "$ZSH_CUSTOM_PATH/plugins/$name" ]; then
      echo -e "${BLUE}${INFO_SYMBOL} Updating $name plugin...${NO_COLOR}"
      (cd "$ZSH_CUSTOM_PATH/plugins/$name" && git pull)
    else
      echo -e "${CYAN}${WORKING_SYMBOL} Installing $name plugin...${NO_COLOR}"
      git clone "$url" "$ZSH_CUSTOM_PATH/plugins/$name" || error_exit "Failed to install $name"
    fi
  done

  echo -e "${GREEN}${SUCCESS_SYMBOL} Oh My Zsh installation and configuration completed successfully${NO_COLOR}"
  echo -e "${YELLOW}${WARNING_SYMBOL} Please log out and log back in for the shell change to take effect${NO_COLOR}"
}

function setup_tmux {
  echo -e "${CYAN}${WORKING_SYMBOL} Setting up Tmux Plugin Manager...${NO_COLOR}"
  rm -rf ~/.tmux/
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm || error_exit "Failed to install TPM (Tmux Plugin Manager)"
  echo -e "${GREEN}${SUCCESS_SYMBOL} Tmux Plugin Manager setup completed successfully${NO_COLOR}"
}

function main {
  if [[ "$#" -eq 0 ]]; then
    echo -e "${YELLOW}${INFO_SYMBOL} Usage: $0 [yay|default|omz|tmux|all]${NO_COLOR}"
    exit 1
  fi

  echo -e "${CYAN}${WORKING_SYMBOL} Checking dependencies...${NO_COLOR}"
  check_dependencies

  for option in "$@"; do
    case "$option" in
    yay)
      echo -e "${BOLD}${ARROW_SYMBOL} Starting yay installation...${NO_COLOR}"
      install_yay
      ;;
    default)
      echo -e "${BOLD}${ARROW_SYMBOL} Starting package installation...${NO_COLOR}"
      install_packages
      ;;
    omz)
      echo -e "${BOLD}${ARROW_SYMBOL} Starting Oh My Zsh installation...${NO_COLOR}"
      install_oh_my_zsh
      ;;
    tmux)
      echo -e "${BOLD}${ARROW_SYMBOL} Starting Tmux setup...${NO_COLOR}"
      setup_tmux
      ;;
    all)
      echo -e "${BOLD}${ARROW_SYMBOL} Starting full installation...${NO_COLOR}"
      install_yay
      install_packages
      install_oh_my_zsh
      setup_tmux
      ;;
    *)
      echo -e "${RED}${ERROR_SYMBOL} Invalid option: $option${NO_COLOR}"
      exit 1
      ;;
    esac
  done
}

main "$@"
